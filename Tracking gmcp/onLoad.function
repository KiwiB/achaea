// Provides an event infrastructure for GMCP messages.
//
// API:
// tracking_gmcp.subscribe(GMCP_METHOD, MY_FUNCTION)
//     Adds an event listener that calls MY_FUNCTION (passing it gmcp_args) whenever a gmcp message of type GMCP_METHOD (i.e., "Char.Vitals") is received.
//     Returns: a handle that can be used to remove the subscription with handle.remove()
//     Example of adding a listener that prints health on every Char.Vitals GMCP message:
//         let print_hp = tracking_gmcp.subscribe("Char.Vitals", function (vitals) {
//             print("HP: " + vitals.hp);
//         });
//     Example of removing the above listener:
//         print_hp.remove();

client.tracking_gmcp = (function () {
    "use strict";

    const gmcp_methods = {};

    const on_gmcp = function (gmcp_method, gmcp_args) {
        if (!gmcp_methods[gmcp_method]) {
            return;
        }
        gmcp_methods[gmcp_method].run.forEach(function (item) {
            if (typeof item === "function") {
                item(gmcp_args || {});
            }
        });
    };

    const subscribe = function (gmcp_method, action) {
        if (!gmcp_methods[gmcp_method]) {
            gmcp_methods[gmcp_method] = {
                run: [], // Functions to execute
                deleted: [] // Indexes of elements removed from run
            };
        }
        const method = gmcp_methods[gmcp_method];
        let index;
        if (method.deleted.length === 0) {
            index = method.run.push(action) - 1;
        } else {
            index = method.deleted.pop();
            method.run[index] = action;
        }
        return {
            remove: function () {
                delete method.run[index];
                method.deleted.push(index);
            }
        };
    };

    return Object.freeze({
        on_gmcp,
        subscribe,
    });
}());