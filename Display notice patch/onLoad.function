// Adds support for multi-chunk display notices.
//
// API:
// display_notice(TEXT)
//     Displays TEXT.
// display_notice(TEXT, FG_COLOR)
//     Displays TEXT in the color of FG_COLOR.
//     Example of printing "Oh no!" in red:
//         display_notice("Oh no!", "red");
// display_notice(TEXT, FG_COLOR, BG_COLOR)
//     Displays TEXT in the colour of FG_COLOR on a BG_COLOR background.
//     Note: Use "" for default colours.
//     Example of printing "Oh no!" in red on blue:
//         display_notice("Oh no!", "red", "blue");
//     Example of printing "Oh no!" in default text colour on blue:
//         display_notice("Oh no!", "", "blue");
// display_notice(TEXT, FG_COLOR, BG_COLOR, TEXT2, FG_COLOR2, BG_COLOR2...)
//     Displays TEXT in the colour of FG_COLOR on a BG_COLOR background followed by TEXT2 in the colour of FG_COLOR2 on a BG_COLOR background.
//     Note: If the last FG_COLOR or BG_COLOR is unspecified or any FG_COLOR or BG_COLOR is "", the colours will be the last defined FG_COLOR or BG_COLOR (they will not revert to default colours).
//     Note: Set FG_COLOR to "reset" to return text and background colour to default (accompanying BG_COLOR will be ignored). There is no way to revert text or background colour independently.
//     Example of printing "Oh no!" in red on blue followed by " Anything but that!" in orange on green.
//         display_notice("Oh no!", "red", "blue", " Anything but that!", "orange", "green");
//     Example of printing "Oh no!" in red on blue followed by " Anything but that!" in orange on blue.
//         display_notice("Oh no!", "red", "blue", " Anything but that!", "orange");
//     Example of printing "Oh no!" in red on blue followed by " Anything but that!" in default colours.
//         display_notice("Oh no!", "red", "blue", " Anything but that!", "reset");
//     Example of printing "Oh no!" in red on blue followed by " Anything but that!" in default text colour on blue:
//         display_notice("Oh no!", "red", "blue", "", "reset", "", " Anything but that!", "", "blue");
//     Example of printing "Oh no!" in red on blue followed by " Anything but that!" in orange, then " This is madness!" in default colours, then " Why?!" in red.
//         display_notice("Oh no!", "red", "blue", " Anything but that!", "orange", "", " This is madness!", "reset", "", " Why?!", "red");

(function () {
    "use strict";

    // Overwrites client.display_notice to allow for multiple text chunks with independent colour
    client.display_notice = function (...args) {
        if (!args[0] || !args[0].length) {
            return;
        }
        let bg;
        let chunk = [];
        let chunks = [];
        let fg;
        let text;
        chunks.length = Math.ceil(args.length / 3);
        chunks = chunks.fill().map((ignore, i) => args.slice(i * 3, i * 3 + 3));
        console.log(chunks);
        chunks.forEach(function (e) {
            text = e[0];
            fg = e[1];
            bg = e[2];
            bg = client.convert_bgcolor(bg);
            chunk.push(linechunk_color(fg, bg));
            chunk.push(linechunk_text(text));
        });
        let line = {};
        line.parsed_line = linechunks_create(chunk);
        line.no_triggers = true;

        // if this is called inside a trigger, append the notice to the currently processed block
        // otherwise show it right away
        if (client.current_block) {
            let idx = client.current_block.length;
            if (client.current_line) {
                idx = client.current_block.indexOf(client.current_line) + 1;
            }
            client.current_block.splice(idx, 0, line);
        } else {
            let lines = [];
            lines.push(line);
            client.display_text_block(lines);
        }
    };

    // Overwrites the API wrapper to allow passing in more arguments
    Nexus.display_notice = (...args) => client.display_notice(...args);
}());